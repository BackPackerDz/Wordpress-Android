package com.squalala.dz6android.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.squalala.dz6android.greendao.Article;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE".
*/
public class ArticleDao extends AbstractDao<Article, Long> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property UrlImage = new Property(3, String.class, "urlImage", false, "URL_IMAGE");
        public final static Property Link = new Property(4, String.class, "link", false, "LINK");
        public final static Property Author = new Property(5, String.class, "author", false, "AUTHOR");
        public final static Property Status = new Property(6, Boolean.class, "status", false, "STATUS");
        public final static Property Deleted = new Property(7, Boolean.class, "deleted", false, "DELETED");
        public final static Property Favoris = new Property(8, Boolean.class, "favoris", false, "FAVORIS");
        public final static Property Date = new Property(9, java.util.Date.class, "date", false, "DATE");
    };

    private DaoSession daoSession;


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"CONTENT\" TEXT NOT NULL ," + // 2: content
                "\"URL_IMAGE\" TEXT," + // 3: urlImage
                "\"LINK\" TEXT," + // 4: link
                "\"AUTHOR\" TEXT," + // 5: author
                "\"STATUS\" INTEGER," + // 6: status
                "\"DELETED\" INTEGER," + // 7: deleted
                "\"FAVORIS\" INTEGER," + // 8: favoris
                "\"DATE\" INTEGER);"); // 9: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getContent());
 
        String urlImage = entity.getUrlImage();
        if (urlImage != null) {
            stmt.bindString(4, urlImage);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(5, link);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        Boolean status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status ? 1L: 0L);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(8, deleted ? 1L: 0L);
        }
 
        Boolean favoris = entity.getFavoris();
        if (favoris != null) {
            stmt.bindLong(9, favoris ? 1L: 0L);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(10, date.getTime());
        }
    }

    @Override
    protected void attachEntity(Article entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // urlImage
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // link
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // author
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // status
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // deleted
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // favoris
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setContent(cursor.getString(offset + 2));
        entity.setUrlImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setDeleted(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setFavoris(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Article entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Article entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
